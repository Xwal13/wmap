package main

import (
	"fmt"
	"os"
	"strings"
	"time"
)

// Structure for storing active port results
type ActivePortResult struct {
	Host  string
	Ports []int
}

// Generate an Nmap-style report for both passive and active results
// Updated: removed 'EXTRA' column and all usage of ExtraInfo (since it no longer exists)
func generateNmapStyleReport(target string, passiveResults []PassivePortResult, activeResults []ActivePortResult) string {
	now := time.Now().Format("2006-01-02 15:04:05")
	report := []string{
		fmt.Sprintf("# Nmap-style Scan Report"),
		fmt.Sprintf(""),
		fmt.Sprintf("Host: %s", target),
		fmt.Sprintf("Scan type: Active & Passive"),
		fmt.Sprintf("Scan time: %s", now),
		fmt.Sprintf(""),
	}

	// ---- Passive Section ----
	report = append(report, "================== Passive Scan Results ==================")
	// Group by Host
	hostPorts := make(map[string][]PassivePortResult)
	for _, r := range passiveResults {
		hostPorts[r.Host] = append(hostPorts[r.Host], r)
	}
	for host, sources := range hostPorts {
		report = append(report, fmt.Sprintf("---------------------------------------------------------------"))
		report = append(report, fmt.Sprintf("Host: %-20s", host))
		// Print table header (removed EXTRA)
		report = append(report, "PORT     SOURCE      SERVICE     VERSION     STATE")
		foundAny := false
		for _, src := range sources {
			portStr := "-"
			if src.Port > 0 {
				portStr = fmt.Sprintf("%d", src.Port)
			}
			service := src.Service
			version := src.Version
			if service == "" {
				service = "-"
			}
			if version == "" {
				version = "-"
			}
			if src.Port > 0 {
				report = append(report, fmt.Sprintf("%-8s%-12s%-12s%-12sopen", portStr, src.Source, service, version))
				foundAny = true
			}
		}
		if !foundAny {
			report = append(report, "No open ports found by passive sources.")
		}
		report = append(report, "")
	}

	// ---- Active Section ----
	report = append(report, "================== Active Scan Results ===================")
	for _, r := range activeResults {
		report = append(report, fmt.Sprintf("---------------------------------------------------------------"))
		report = append(report, fmt.Sprintf("Host: %-20s", r.Host))
		report = append(report, "PORT     STATE")
		if len(r.Ports) == 0 {
			report = append(report, "No open ports found by active scan.")
		} else {
			for _, p := range r.Ports {
				report = append(report, fmt.Sprintf("%-8dopen", p))
			}
		}
		report = append(report, "")
	}

	report = append(report, "Report generated by wmap3")
	return strings.Join(report, "\n")
}

func saveReportToFile(path, report string) error {
	return os.WriteFile(path, []byte(report), 0644)
}